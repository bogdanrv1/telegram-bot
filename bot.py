import logging
import os
from contextlib import contextmanager

from dotenv import load_dotenv
from sqlalchemy.orm import Session

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import Project, SessionLocal, User, create_db_and_tables

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
load_dotenv()
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
TASK_NAME, TASK_DAYS, TASK_DAY_CONTENT = range(3)

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
@contextmanager
def get_db_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ –ë–î."""
    db = SessionLocal()
    try:
        yield db
    except Exception:
        db.rollback()
        raise
    finally:
        db.close()


# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} ({user.id})")

    with get_db_session() as db:
        db_user = db.query(User).filter(User.id == user.id).first()
        if not db_user:
            db_user = User(id=user.id, username=user.username)
            db.add(db_user)
            db.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
            await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç, {user.username}! –Ø –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª.")
        else:
            await update.message.reply_text(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.username}!")
    await help_command(update, context)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    message = (
        "–Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/create_task - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/my_tasks - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text(message)


async def my_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å /my_tasks –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    with get_db_session() as db:
        tasks = db.query(Project).filter(Project.assignee_id == user_id).all()
        if not tasks:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        message_lines = ["üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"]
        for task in tasks:
            message_lines.append(f"‚Ä¢ ID: {task.id} - {task.project_name} (–°—Ç–∞—Ç—É—Å: {task.status})")
        await update.message.reply_text("\n".join(message_lines))


# --- –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (ConversationHandler) ---

async def create_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
    # –ü–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á—É.")
    await update.message.reply_text(
        "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
    )
    return TASK_NAME


async def get_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."""
    context.user_data['task_name'] = update.message.text
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {context.user_data['task_name']}")
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
    return TASK_DAYS


async def get_task_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–ª–∞–Ω."""
    try:
        days = int(update.message.text)
        if not (1 <= days <= 30):
            raise ValueError
        context.user_data['task_days'] = days
        context.user_data['daily_plan'] = []
        context.user_data['current_day'] = 1
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {days}")
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –Ω–∞ –î–µ–Ω—å 1:")
        return TASK_DAY_CONTENT
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30.")
        return TASK_DAYS


async def get_day_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –∏ –ª–∏–±–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç."""
    plan = update.message.text
    context.user_data['daily_plan'].append(plan)
    
    current_day = context.user_data['current_day']
    total_days = context.user_data['task_days']
    
    if current_day < total_days:
        context.user_data['current_day'] += 1
        await update.message.reply_text(f"–ü–ª–∞–Ω –Ω–∞ –î–µ–Ω—å {current_day} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –Ω–∞ –î–µ–Ω—å {context.user_data['current_day']}:")
        return TASK_DAY_CONTENT
    else:
        logger.info("–í–≤–µ–¥–µ–Ω—ã –≤—Å–µ –ø–ª–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É...")
        return await save_task_and_finish(update, context)


async def save_task_and_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    user_id = update.effective_user.id
    
    with get_db_session() as db:
        new_project = Project(
            project_name=context.user_data['task_name'],
            leader_id=user_id,
            assignee_id=user_id, # –ü–æ–∫–∞ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ —Å–µ–±—è
            daily_plan=context.user_data['daily_plan']
        )
        db.add(new_project)
        db.commit()
        logger.info(f"–ó–∞–¥–∞—á–∞ '{new_project.project_name}' —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ '{new_project.project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–µ –≤ —Å–ø–∏—Å–∫–µ /my_tasks."
        )
    
    context.user_data.clear()
    return ConversationHandler.END


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.")
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ ---

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏."""
    logger.error("Exception while handling an update:", exc_info=context.error)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    create_db_and_tables()

    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    application = Application.builder().token(token).build()

    # --- –°–æ–∑–¥–∞–µ–º ConversationHandler ---
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("create_task", create_task_start)],
        states={
            TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_task_name)],
            TASK_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_task_days)],
            TASK_DAY_CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_day_content)],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
    )

    # --- –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    application.add_handler(conv_handler) # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_tasks", my_tasks_command))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
