import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, ConversationHandler, 
    MessageHandler, filters, CallbackQueryHandler
)
from telegram.constants import ParseMode
from database import User, Project, DailyTask, SessionLocal, create_tables, generate_project_id
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê–¥–º–∏–Ω—ã (–¥–æ–±–∞–≤—å —Å–≤–æ–π Telegram ID)
ADMINS = [499188225, 6166088736]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
PROJECT_NAME, PROJECT_DAYS, DAILY_TASKS, REMINDER_TIME, START_DATE, PROJECT_OWNER, CONFIRM_PROJECT = range(7)
ADD_DAY, ADD_DAY_TASK, REMINDER_COUNT, REMINDER_TIMES, CHANGE_NAME, CONFIRM_NAME = range(7, 13)

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def get_db():
    db = SessionLocal()
    try:
        return db
    finally:
        db.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = get_db()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = db.query(User).filter(User.id == user.id).first()
    if not db_user:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π short_id
        max_short_id = db.query(User.short_id).order_by(User.short_id.desc()).first()
        next_short_id = 1 if max_short_id is None else max_short_id[0] + 1
        
        db_user = User(id=user.id, username=user.username, short_id=next_short_id)
        db.add(db_user)
        db.commit()
    
    role = "üëë –ê–¥–º–∏–Ω" if is_admin(user.id) else "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫"
    
    welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Project Manager Bot!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user.username or user.id}!
üéØ –í–∞—à–∞ —Ä–æ–ª—å: <b>{role}</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /newproject - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /myprojects - –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ /projects - –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞

üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:</b>
/newproject
"""
    
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /newproject - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /myprojects - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ /complete [ID] - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /plusoneday [ID] - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å –∫ –ø—Ä–æ–µ–∫—Ç—É
‚Ä¢ /daily [ID] - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ /delete [ID] - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /changename - –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ /remindersettings [ID] - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è)

üëë <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /projects - –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /seereminder - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ /newproject - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /complete 0001 - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç 0001
‚Ä¢ /remindersettings 0001 - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ 0001
‚Ä¢ /daily 0001 - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ 0001
"""
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# –ö–æ–º–∞–Ω–¥–∞ /users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
async def users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    db = get_db()
    users_list = db.query(User).all()
    
    lines = ["üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã:</b>"]
    for u in users_list:
        role = "üëë –ê–¥–º–∏–Ω" if is_admin(u.id) else "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        projects_count = len(u.projects)
        display_name = u.display_name or u.username or str(u.id)
        lines.append(f"<b>[{u.short_id}]</b> {display_name} ‚Äî {role} üìä {projects_count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# –ö–æ–º–∞–Ω–¥–∞ /projects (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
async def all_projects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    db = get_db()
    projects = db.query(Project).all()
    
    if not projects:
        await update.message.reply_text("üì≠ –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    lines = ["üìã <b>–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ:</b>"]
    for p in projects:
        user = db.query(User).filter(User.id == p.user_id).first()
        status_emoji = {"active": "üü¢", "completed": "‚úÖ", "paused": "‚è∏Ô∏è"}
        status = status_emoji.get(p.status, "‚ùì")
        user_name = user.display_name or user.username or str(user.id)
        lines.append(f"<b>[{p.project_id}]</b> {p.name} ‚Äî {user_name} {status}")
    
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# –ö–æ–º–∞–Ω–¥–∞ /myprojects
async def my_projects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db = get_db()
    
    projects = db.query(Project).filter(Project.user_id == user_id).all()
    
    if not projects:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\nüéØ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n/newproject"
        )
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    active_projects = [p for p in projects if p.status == "active"]
    completed_projects = [p for p in projects if p.status == "completed"]
    
    lines = [f"üìã <b>–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:</b>"]
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    if active_projects:
        lines.append("")
        lines.append("üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ:</b>")
        for p in active_projects:
            completed_tasks = sum(1 for task in p.daily_tasks if task.completed == "completed")
            total_tasks = len(p.daily_tasks)
            progress = f"{completed_tasks}/{total_tasks}" if total_tasks > 0 else "0/0"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            start_date = p.start_date
            end_date = start_date + timedelta(days=p.days_count - 1)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            day_names = ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]
            start_day = day_names[start_date.weekday()]
            end_day = day_names[end_date.weekday()]
            
            lines.append(f"‚Ä¢ <b>[{p.project_id}]</b> {p.name}")
            lines.append(f"  üìÖ {p.days_count} –¥–Ω–µ–π | ‚è∞ {p.reminder_time} | üìä {progress}")
            lines.append(f"  üìÜ {start_date.strftime('%d.%m')}({start_day}) - {end_date.strftime('%d.%m')}({end_day})")
            lines.append("")
            if hasattr(p, 'created_by') and p.created_by and p.created_by != p.user_id:
                assigner = db.query(User).filter(User.id == p.created_by).first()
                assigner_name = assigner.display_name or assigner.username or str(assigner.id) if assigner else '–¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                lines.append(f"  üë§ –ù–∞–∑–Ω–∞—á–∏–ª: {assigner_name}")
            print(f"[DEBUG] –ü—Ä–æ–µ–∫—Ç {p.project_id}: created_by={getattr(p, 'created_by', None)}, user_id={p.user_id}")
    else:
        lines.append("")
        lines.append("üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ:</b>")
        lines.append("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        lines.append("")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    if completed_projects:
        lines.append("‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:</b>")
        for p in completed_projects:
            completed_tasks = sum(1 for task in p.daily_tasks if task.completed == "completed")
            total_tasks = len(p.daily_tasks)
            progress = f"{completed_tasks}/{total_tasks}" if total_tasks > 0 else "0/0"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            start_date = p.start_date
            end_date = start_date + timedelta(days=p.days_count - 1)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            day_names = ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]
            start_day = day_names[start_date.weekday()]
            end_day = day_names[end_date.weekday()]
            
            lines.append(f"‚Ä¢ <b>[{p.project_id}]</b> {p.name}")
            lines.append(f"  üìÖ {p.days_count} –¥–Ω–µ–π | ‚è∞ {p.reminder_time} | üìä {progress}")
            lines.append(f"  üìÜ {start_date.strftime('%d.%m')}({start_day}) - {end_date.strftime('%d.%m')}({end_day})")
            lines.append("")
            if hasattr(p, 'created_by') and p.created_by and p.created_by != p.user_id:
                assigner = db.query(User).filter(User.id == p.created_by).first()
                assigner_name = assigner.display_name or assigner.username or str(assigner.id) if assigner else '–¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                lines.append(f"  üë§ –ù–∞–∑–Ω–∞—á–∏–ª: {assigner_name}")
            print(f"[DEBUG] –ü—Ä–æ–µ–∫—Ç {p.project_id}: created_by={getattr(p, 'created_by', None)}, user_id={p.user_id}")
    else:
        lines.append("‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:</b>")
        lines.append("üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        lines.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    lines.append("üìã <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏:</b>")
    lines.append("")
    lines.append("<b>ID –ø—Ä–æ–µ–∫—Ç–∞ 0001(–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞):</b>")
    lines.append("‚Ä¢ /complete 0001 - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
    lines.append("‚Ä¢ /plusoneday 0001 - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å")
    lines.append("‚Ä¢ /daily 0001 - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
    lines.append("‚Ä¢ /delete 0001 - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
    lines.append("‚Ä¢ /remindersettings 0001 - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
async def newproject_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
        "üìù –ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:",
        parse_mode=ParseMode.HTML
    )
    return PROJECT_NAME

async def newproject_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    project_name = update.message.text.strip()
    if len(project_name) > 100:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return PROJECT_NAME
    
    context.user_data['project'] = {'name': project_name}
    
    await update.message.reply_text(
        f"üìù <b>–ü—Ä–æ–µ–∫—Ç:</b> {project_name}\n\n"
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (1-30):",
        parse_mode=ParseMode.HTML
    )
    return PROJECT_DAYS

async def newproject_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text)
        if days < 1 or days > 30:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30:")
        return PROJECT_DAYS
    
    context.user_data['project']['days_count'] = days
    context.user_data['project']['daily_tasks'] = []
    context.user_data['current_day'] = 1
    
    await update.message.reply_text(
        f"üìÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:</b> {days}\n\n"
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≤ <b>–î–µ–Ω—å 1</b>:",
        parse_mode=ParseMode.HTML
    )
    return DAILY_TASKS

async def newproject_daily_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_description = update.message.text.strip()
    current_day = context.user_data['current_day']
    days_count = context.user_data['project']['days_count']
    
    context.user_data['project']['daily_tasks'].append({
        'day': current_day,
        'description': task_description
    })
    
    if current_day < days_count:
        context.user_data['current_day'] = current_day + 1
        await update.message.reply_text(
            f"‚úÖ <b>–î–µ–Ω—å {current_day}</b> –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìù –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≤ <b>–î–µ–Ω—å {current_day + 1}</b>:",
            parse_mode=ParseMode.HTML
        )
        return DAILY_TASKS
    else:
        await update.message.reply_text(
            f"‚úÖ <b>–î–µ–Ω—å {current_day}</b> –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (HH:MM):\n"
            "–Ø –±—É–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è",
            parse_mode=ParseMode.HTML
        )
        return REMINDER_TIME

async def newproject_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time = update.message.text.strip()
    import re
    if not re.match(r"^\d{2}:\d{2}$", time):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
        return REMINDER_TIME
    
    context.user_data['project']['reminder_time'] = time
    
    await update.message.reply_text(
        f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {time}\n\n"
        f"üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.07):\n"
        f"–≠—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
        parse_mode=ParseMode.HTML
    )
    return START_DATE

async def newproject_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_text = update.message.text.strip()
    import re
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú
    if not re.match(r"^\d{2}\.\d{2}$", date_text):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.07):")
        return START_DATE
    
    try:
        day, month = date_text.split('.')
        day, month = int(day), int(month)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        current_year = datetime.now().year
        start_date = datetime(current_year, month, day)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if start_date < datetime.now():
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
            return START_DATE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥)
        max_future_date = datetime.now() + timedelta(days=365)
        if start_date > max_future_date:
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
            return START_DATE
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.07):")
        return START_DATE
    
    context.user_data['project']['start_date'] = start_date
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    project_data = context.user_data['project']
    lines = [
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>",
        f"",
        f"üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project_data['name']}",
        f"üìÖ <b>–î–Ω–µ–π:</b> {project_data['days_count']}",
        f"üìÜ <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {start_date.strftime('%d.%m.%Y')}",
        f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {project_data['reminder_time']}",
        f"",
        f"üìù <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>"
    ]
    
    for task in project_data['daily_tasks']:
        lines.append(f"<b>–î–µ–Ω—å {task['day']}:</b> {task['description']}")
    
    lines.append("")
    lines.append("üë§ <b>–ö–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?</b>")
    lines.append("")
    lines.append("‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ '—Å–µ–±–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–µ–±—è")
    lines.append("‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ Short ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ –≤ —Å–∫–æ–±–∫–∞—Ö)")
    lines.append("")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db = get_db()
    users_list = db.query(User).all()
    if users_list:
        lines.append("üë• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>")
        for user in users_list:
            display_name = user.display_name or user.username or str(user.id)
            role = "üëë –ê–¥–º–∏–Ω" if is_admin(user.id) else "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫"
            lines.append(f"   ‚Ä¢ <b>[{user.short_id}]</b> {display_name} ‚Äî {role}")
        lines.append("")
    
    lines.append("üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–∫–æ–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2")
    
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)
    return PROJECT_OWNER

async def newproject_owner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    owner_input = update.message.text.strip().lower()
    db = get_db()
    
    if owner_input == "—Å–µ–±–µ":
        # –ü—Ä–æ–µ–∫—Ç –¥–ª—è —Å–µ–±—è
        context.user_data['project']['owner_id'] = update.effective_user.id
        owner_name = "—Å–µ–±—è"
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–º (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        try:
            input_id = int(owner_input)
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É ID
            owner_user = db.query(User).filter(User.id == input_id).first()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ short_id
            if not owner_user:
                owner_user = db.query(User).filter(User.short_id == input_id).first()
            
            if not owner_user:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {input_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /users —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                    f"   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π ID –∏–ª–∏ Short ID.\n\n"
                    f"üë§ –ù–∞–ø–∏—à–∏—Ç–µ '—Å–µ–±–µ' –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    parse_mode=ParseMode.HTML
                )
                return PROJECT_OWNER
            
            context.user_data['project']['owner_id'] = owner_user.id  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π ID
            owner_name = owner_user.display_name or owner_user.username or str(owner_user.id)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ '—Å–µ–±–µ' –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):",
                parse_mode=ParseMode.HTML
            )
            return PROJECT_OWNER
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    project_data = context.user_data['project']
    start_date = project_data['start_date']
    
    lines = [
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>",
        f"",
        f"üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project_data['name']}",
        f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_name}",
        f"üìÖ <b>–î–Ω–µ–π:</b> {project_data['days_count']}",
        f"üìÜ <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {start_date.strftime('%d.%m.%Y')}",
        f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {project_data['reminder_time']}",
        f"",
        f"üìù <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>"
    ]
    
    for task in project_data['daily_tasks']:
        lines.append(f"<b>–î–µ–Ω—å {task['day']}:</b> {task['description']}")
    
    lines.append("")
    lines.append("‚úÖ –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
    
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)
    return CONFIRM_PROJECT

async def newproject_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip().lower() != '–¥–∞':
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    project_data = context.user_data['project']
    db = get_db()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞
        owner_id = project_data.get('owner_id', user_id)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞
        print(f"[DEBUG] –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç: name={project_data['name']}, owner_id={owner_id}, created_by={user_id}")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        project = Project(
            project_id=generate_project_id(),
            user_id=owner_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            name=project_data['name'],
            days_count=project_data['days_count'],
            reminder_time=project_data['reminder_time'],
            start_date=project_data.get('start_date', datetime.now() + timedelta(days=1)),
            created_by=user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—Ç–æ –Ω–∞–∑–Ω–∞—á–∏–ª
        )
        db.add(project)
        db.commit()  # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç
        print(f"[DEBUG] –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: id={project.id}, project_id={project.project_id}, created_by={project.created_by}, user_id={project.user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task_data in project_data['daily_tasks']:
            daily_task = DailyTask(
                project_id=project.id,
                day_number=task_data['day'],
                description=task_data['description']
            )
            db.add(daily_task)
        
        db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞
        start_date = project.start_date
        day_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        day_name = day_names[start_date.weekday()]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞
        owner_user = db.query(User).filter(User.id == owner_id).first()
        owner_name = owner_user.display_name or owner_user.username or str(owner_user.id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –ø—Ä–æ–µ–∫—Ç
        creator_user = db.query(User).filter(User.id == user_id).first()
        creator_name = creator_user.display_name or creator_user.username or str(creator_user.id)
        
        success_text = f"""
üéâ <b>–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:</b>
‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project.name}
‚Ä¢ <b>ID –ø—Ä–æ–µ–∫—Ç–∞:</b> <code>{project.project_id}</code>
‚Ä¢ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_name}
‚Ä¢ <b>–°–æ–∑–¥–∞–ª:</b> {creator_name}
‚Ä¢ <b>–î–Ω–µ–π:</b> {project.days_count}
‚Ä¢ <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {project.reminder_time}

üöÄ <b>–ü—Ä–æ–µ–∫—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç {start_date.strftime('%d.%m')}({day_name}) –≤ {project.reminder_time}</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /complete {project.project_id} - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /plusoneday {project.project_id} - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å
‚Ä¢ /daily {project.project_id} - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
‚Ä¢ /delete {project.project_id} - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /remindersettings {project.project_id} - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ /myprojects - –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
"""
        
        await update.message.reply_text(success_text, parse_mode=ParseMode.HTML)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if owner_id != user_id:
            try:
                print(f"[DEBUG] –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {owner_id}")
                notify_text = (
                    f"üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{creator_name}</b> –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç!\n\n"
                    f"‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project.name}\n"
                    f"‚Ä¢ <b>ID:</b> <code>{project.project_id}</code>\n\n"
                    f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã: /myprojects"
                )
                await context.bot.send_message(chat_id=owner_id, text=notify_text, parse_mode=ParseMode.HTML)
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {owner_id}")
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        logger.error(f"–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞: {project_data}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
    
    return ConversationHandler.END

async def newproject_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /complete [ID]
async def complete_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /complete [ID –ø—Ä–æ–µ–∫—Ç–∞]")
        return
    
    project_id = context.args[0]
    user_id = update.effective_user.id
    db = get_db()
    
    project = db.query(Project).filter(
        Project.project_id == project_id,
        Project.user_id == user_id
    ).first()
    
    if not project:
        await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if project.status == "completed":
        await update.message.reply_text("‚úÖ –ü—Ä–æ–µ–∫—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return
    
    project.status = "completed"
    db.commit()
    
    await update.message.reply_text(
        f"üéâ <b>–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üìã <b>{project.name}</b> (ID: {project.project_id})\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω",
        parse_mode=ParseMode.HTML
    )

# –ö–æ–º–∞–Ω–¥–∞ /plusoneday [ID]
async def add_day_to_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /plusoneday [ID –ø—Ä–æ–µ–∫—Ç–∞]")
        return ConversationHandler.END
    
    project_id = context.args[0]
    user_id = update.effective_user.id
    db = get_db()
    
    project = db.query(Project).filter(
        Project.project_id == project_id,
        Project.user_id == user_id
    ).first()
    
    if not project:
        await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END
    
    if project.status == "completed":
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.")
        return ConversationHandler.END
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    project.days_count += 1
    db.commit()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['add_day'] = {
        'project_id': project.project_id,
        'project_name': project.name,
        'new_day': project.days_count
    }
    
    await update.message.reply_text(
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è –∫ –ø—Ä–æ–µ–∫—Ç—É</b>\n\n"
        f"üìã –ü—Ä–æ–µ–∫—Ç: {project.name} (ID: {project.project_id})\n"
        f"üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å: {project.days_count}\n\n"
        f"üìù –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≤ <b>–î–µ–Ω—å {project.days_count}</b>:",
        parse_mode=ParseMode.HTML
    )
    return ADD_DAY_TASK

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
async def add_day_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_description = update.message.text.strip()
    add_day_data = context.user_data['add_day']
    
    db = get_db()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
    project = db.query(Project).filter(Project.project_id == add_day_data['project_id']).first()
    
    if not project:
        await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
    new_day_task = DailyTask(
        project_id=project.id,
        day_number=add_day_data['new_day'],
        description=task_description
    )
    db.add(new_day_task)
    db.commit()
    
    await update.message.reply_text(
        f"‚úÖ <b>–î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìã –ü—Ä–æ–µ–∫—Ç: {project.name} (ID: {project.project_id})\n"
        f"üìÖ –î–µ–Ω—å {add_day_data['new_day']}: {task_description}\n"
        f"üìä –í—Å–µ–≥–æ –¥–Ω–µ–π: {project.days_count}",
        parse_mode=ParseMode.HTML
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('add_day', None)
    
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /daily [ID]
async def show_daily_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /daily [ID –ø—Ä–æ–µ–∫—Ç–∞]")
        return
    
    project_id = context.args[0]
    user_id = update.effective_user.id
    db = get_db()
    
    project = db.query(Project).filter(
        Project.project_id == project_id,
        Project.user_id == user_id
    ).first()
    
    if not project:
        await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
    tasks = db.query(DailyTask).filter(DailyTask.project_id == project.id).order_by(DailyTask.day_number).all()
    
    if not tasks:
        await update.message.reply_text("‚ùå –£ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    
    lines = [f"üìÖ <b>–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project.name} (ID: {project.project_id}):</b>"]
    
    for task in tasks:
        status_emoji = {"pending": "‚è≥", "completed": "‚úÖ", "skipped": "‚è≠Ô∏è"}
        status = status_emoji.get(task.completed, "‚ùì")
        lines.append(f"<b>–î–µ–Ω—å {task.day_number}:</b> {task.description} {status}")
    
    lines.append("")
    lines.append("üí° <b>–°—Ç–∞—Ç—É—Å—ã:</b>")
    lines.append("‚è≥ - –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    lines.append("‚úÖ - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    lines.append("‚è≠Ô∏è - –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    
    await update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# –ö–æ–º–∞–Ω–¥–∞ /delete [ID]
async def delete_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete [ID –ø—Ä–æ–µ–∫—Ç–∞]")
        return
    
    project_id = context.args[0]
    user_id = update.effective_user.id
    db = get_db()
    
    project = db.query(Project).filter(
        Project.project_id == project_id,
        Project.user_id == user_id
    ).first()
    
    if not project:
        await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    project_name = project.name
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –∏ –∑–∞–¥–∞—á–∏)
    db.delete(project)
    db.commit()
    
    await update.message.reply_text(
        f"üóëÔ∏è <b>–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!</b>\n\n"
        f"üìã <b>{project_name}</b> (ID: {project_id})\n"
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç –∏ –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )

# –ö–æ–º–∞–Ω–¥–∞ /remindersettings [ID]
async def reminder_settings_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remindersettings [ID –ø—Ä–æ–µ–∫—Ç–∞]")
        return ConversationHandler.END
    
    project_id = context.args[0]
    user_id = update.effective_user.id
    db = get_db()
    
    project = db.query(Project).filter(
        Project.project_id == project_id,
        Project.user_id == user_id
    ).first()
    
    if not project:
        await update.message.reply_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END
    
    context.user_data['reminder_settings'] = {'project_id': project_id}
    
    await update.message.reply_text(
        f"‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        f"üìã –ü—Ä–æ–µ–∫—Ç: {project.name} (ID: {project_id})\n"
        f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {project.reminder_time}\n\n"
        f"–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? (1-5):",
        parse_mode=ParseMode.HTML
    )
    return REMINDER_COUNT

async def reminder_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        if count < 1 or count > 5:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:")
        return REMINDER_COUNT
    
    context.user_data['reminder_settings']['count'] = count
    
    await update.message.reply_text(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {count}\n\n"
        f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø—Ä–∏–º–µ—Ä: 12:00 14:00 16:00):",
        parse_mode=ParseMode.HTML
    )
    return REMINDER_TIMES

async def reminder_times(update: Update, context: ContextTypes.DEFAULT_TYPE):
    times_text = update.message.text.strip()
    count = context.user_data['reminder_settings']['count']
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞
    import re
    times = re.findall(r'\d{2}:\d{2}', times_text)
    
    if len(times) != count:
        await update.message.reply_text(f"‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–æ–≤–Ω–æ {count} –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return REMINDER_TIMES
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    for time in times:
        if not re.match(r'^\d{2}:\d{2}$', time):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM:")
            return REMINDER_TIMES
    
    project_id = context.user_data['reminder_settings']['project_id']
    db = get_db()
    
    project = db.query(Project).filter(Project.project_id == project_id).first()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–≤–æ–µ)
    project.reminder_time = times[0]  # –ü–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è
    db.commit()
    
    times_str = " ".join(times)
    
    await update.message.reply_text(
        f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
        f"üìã –ü—Ä–æ–µ–∫—Ç: {project.name} (ID: {project_id})\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {times_str}\n"
        f"üìÖ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º {count} —Ä–∞–∑ –≤ –¥–µ–Ω—å –æ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º",
        parse_mode=ParseMode.HTML
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('reminder_settings', None)
    
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /seereminder (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
async def see_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_text = f"""
üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ</b>

üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
üÜî <b>ID:</b> 0001
üìÖ <b>–î–µ–Ω—å:</b> 1 –∏–∑ 3
‚è∞ <b>–í—Ä–µ–º—è:</b> 12:00

üìù <b>–ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
–°–º–æ—Ç—Ä–µ—Ç—å

üí° <b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

üéØ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> 0/3 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

‚úÖ <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>
‚Ä¢ /complete_task 0001 1 - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
‚Ä¢ /skip_task 0001 1 - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É
‚Ä¢ /daily 0001 - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
"""
    
    await update.message.reply_text(reminder_text, parse_mode=ParseMode.HTML)

# –ö–æ–º–∞–Ω–¥–∞ /changename
async def change_name_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db = get_db()
    
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await update.message.reply_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode=ParseMode.HTML
        )
        return ConversationHandler.END
    
    current_name = user.display_name or user.username or str(user.id)
    logger.info(f"–¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_name}")
    
    await update.message.reply_text(
        f"üë§ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞</b>\n\n"
        f"üîÑ –¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º: <b>{current_name}</b>\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:",
        parse_mode=ParseMode.HTML
    )
    return CHANGE_NAME

async def change_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text.strip()
    
    if len(new_name) > 100:
        await update.message.reply_text("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return CHANGE_NAME
    
    if len(new_name) < 2:
        await update.message.reply_text("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return CHANGE_NAME
    
    context.user_data['new_name'] = new_name
    
    await update.message.reply_text(
        f"üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞</b>\n\n"
        f"üîÑ –¢–µ–∫—É—â–∏–π: <b>{update.effective_user.username or update.effective_user.id}</b>\n"
        f"‚ú® –ù–æ–≤—ã–π: <b>{new_name}</b>\n\n"
        f"‚úÖ –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode=ParseMode.HTML
    )
    return CONFIRM_NAME

async def change_name_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip().lower() != '–¥–∞':
        await update.message.reply_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    new_name = context.user_data['new_name']
    user_id = update.effective_user.id
    db = get_db()
    
    logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ '{new_name}'")
    
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    old_name = user.display_name or user.username or str(user.id)
    user.display_name = new_name
    
    try:
        db.commit()
        logger.info(f"–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω: {old_name} ‚Üí {new_name}")
        
        await update.message.reply_text(
            f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"üîÑ <b>{old_name}</b> ‚Üí <b>{new_name}</b>\n\n"
            f"üë§ –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç–µ—Å—å –∫–∞–∫ <b>{new_name}</b>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞: {e}")
        db.rollback()
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('new_name', None)
    
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    logger.info("–ó–∞–ø—É—Å–∫ Project Manager Bot...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("users", users))
    application.add_handler(CommandHandler("projects", all_projects))
    application.add_handler(CommandHandler("seereminder", see_reminder))
    application.add_handler(CommandHandler("myprojects", my_projects))
    application.add_handler(CommandHandler("complete", complete_project))
    application.add_handler(CommandHandler("daily", show_daily_tasks))
    application.add_handler(CommandHandler("delete", delete_project))
    
    # –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    newproject_handler = ConversationHandler(
        entry_points=[CommandHandler("newproject", newproject_start)],
        states={
            PROJECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, newproject_name)],
            PROJECT_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, newproject_days)],
            DAILY_TASKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, newproject_daily_tasks)],
            REMINDER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, newproject_reminder_time)],
            START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, newproject_start_date)],
            PROJECT_OWNER: [MessageHandler(filters.TEXT & ~filters.COMMAND, newproject_owner)],
            CONFIRM_PROJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, newproject_confirm)],
        },
        fallbacks=[CommandHandler("cancel", newproject_cancel)],
    )
    application.add_handler(newproject_handler)
    
    # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è
    add_day_handler = ConversationHandler(
        entry_points=[CommandHandler("plusoneday", add_day_to_project)],
        states={
            ADD_DAY_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_day_task)],
        },
        fallbacks=[CommandHandler("cancel", newproject_cancel)],
    )
    application.add_handler(add_day_handler)
    
    # –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_settings_handler = ConversationHandler(
        entry_points=[CommandHandler("remindersettings", reminder_settings_start)],
        states={
            REMINDER_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, reminder_count)],
            REMINDER_TIMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, reminder_times)],
        },
        fallbacks=[CommandHandler("cancel", newproject_cancel)],
    )
    application.add_handler(reminder_settings_handler)
    
    # –î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
    change_name_handler = ConversationHandler(
        entry_points=[CommandHandler("changename", change_name_start)],
        states={
            CHANGE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_name_input)],
            CONFIRM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_name_confirm)],
        },
        fallbacks=[CommandHandler("cancel", newproject_cancel)],
    )
    application.add_handler(change_name_handler)
    
    logger.info("Project Manager Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main() 
