import json
import logging
from datetime import datetime, date, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
import os
from dotenv import load_dotenv
from sqlalchemy.orm import Session, joinedload
from contextlib import contextmanager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import SessionLocal, User, Project, create_db_and_tables

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv('.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_TYPE, CHOOSING_EMPLOYEE, TASK_NAME, TASK_DAYS, TASK_DAY_CONTENT, REMINDER_TIME = range(6)

# –ê–¥–º–∏–Ω—ã (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏) - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID
ADMINS = [499188225]

@contextmanager
def get_db_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ –ë–î."""
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        db.rollback()
        logger.error(f"Database error: {e}")
        raise
    finally:
        db.close()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMINS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î."""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    with get_db_session() as db:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            user = User(id=user_id, username=username)
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user_id})")

        if is_admin(user_id):
            # –ú–µ–Ω—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
            all_projects = db.query(Project).filter(Project.leader_id == user_id).all()
            all_active = [p for p in all_projects if p.status == 'active']
            all_completed = [p for p in all_projects if p.status == 'completed']
            employee_count = db.query(User).count()

            message = f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã.\n\n"
            message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_active)}\n"
            message += f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employee_count}\n"
            message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(all_completed)}\n\n"
            
            if all_active:
                message += "üìã –¢–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n"
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                projects_to_show = db.query(Project).options(joinedload(Project.assignee)).filter(Project.leader_id == user_id, Project.status == 'active').limit(5).all()
                for project in projects_to_show:
                    status_emoji = "üü¢"
                    assignee_username = project.assignee.username if project.assignee else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    message += f"{status_emoji} ID: {project.id} - {project.project_name} (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{assignee_username})\n"
        else:
            # –ú–µ–Ω—é –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            active_projects = db.query(Project).filter(Project.assignee_id == user_id, Project.status == 'active').all()
            completed_projects = db.query(Project).filter(Project.assignee_id == user_id, Project.status == 'completed').all()
            
            message = f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.\n\n"
            message += f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(active_projects)}\n"
            message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {len(completed_projects)}\n"
            message += f"‚Ä¢ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user.reminder_time}\n\n"
            
            if active_projects:
                message += "üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
                for project in active_projects[:3]:
                    day_index = (date.today() - project.start_date).days
                    total_days = len(project.daily_plan)
                    status_emoji = "üü¢" if day_index < total_days else "üü°"
                    message += f"{status_emoji} ID: {project.id} - {project.project_name} (–î–µ–Ω—å {day_index + 1} –∏–∑ {total_days})\n"

    # –û–±—â–∞—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    if is_admin(user_id):
        message += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        message += "/team_status - —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã\n"
        message += "/employee_list - —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        message += "/edit_project ID - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
    else:
        message += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += "/my_tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∑–∞–¥–∞—á—É\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        message += "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"

    await update.message.reply_text(message)

async def create_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ, —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏."""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /create_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    
    if is_admin(user_id):
        keyboard = [
            [InlineKeyboardButton("1Ô∏è‚É£ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data="create_for_employee")],
            [InlineKeyboardButton("2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –¥–ª—è —Å–µ–±—è", callback_data="create_for_self")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ö—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å?", reply_markup=reply_markup)
        return CHOOSING_TYPE
    else:
        context.user_data['create_type'] = 'self'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return TASK_NAME

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ë–î."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "create_for_employee":
        context.user_data['create_type'] = 'employee'
        with get_db_session() as db:
            # –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            employees = db.query(User).filter(User.id.notin_(ADMINS)).all()
            
            if not employees:
                await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
                context.user_data.clear()
                return ConversationHandler.END

            message_lines = ["–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"]
            for emp in employees:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
                active_tasks = db.query(Project).filter(Project.assignee_id == emp.id, Project.status == 'active').count()
                message_lines.append(f"üë§ @{emp.username} (ID: {emp.id}) - {active_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            
            message_lines.append("\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
            await query.edit_message_text("\n".join(message_lines))
        return CHOOSING_EMPLOYEE
        
    elif query.data == "create_for_self":
        context.user_data['create_type'] = 'self'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return TASK_NAME
    
    return CHOOSING_TYPE

async def handle_employee_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î."""
    try:
        employee_id = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return CHOOSING_EMPLOYEE

    with get_db_session() as db:
        employee = db.query(User).filter(User.id == employee_id).first()
        
        if employee and not is_admin(employee.id):
            context.user_data['selected_employee_id'] = employee.id
            await update.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: @{employee.username}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            return TASK_NAME
        else:
            await update.message.reply_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
            return CHOOSING_EMPLOYEE

async def handle_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['task_name'] = update.message.text.strip()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è? (—á–∏—Å–ª–æ)")
    return TASK_DAYS

async def handle_task_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        days = int(update.message.text.strip())
        if not (1 <= days <= 30):
            raise ValueError()
        context.user_data['task_days'] = days
        context.user_data['daily_plan'] = []
        context.user_data['current_day'] = 1
        await update.message.reply_text("–î–µ–Ω—å 1: –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?")
        return TASK_DAY_CONTENT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30.")
        return TASK_DAYS

async def handle_day_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    day_content = update.message.text.strip()
    context.user_data['daily_plan'].append(day_content)
    current_day = context.user_data['current_day']
    total_days = context.user_data['task_days']
    
    if current_day < total_days:
        context.user_data['current_day'] += 1
        await update.message.reply_text(f"–î–µ–Ω—å {current_day + 1}: –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?")
        return TASK_DAY_CONTENT
    else:
        # –£–±—Ä–∞–ª –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        return await save_task_and_finish(update, context)

async def save_task_and_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    user_id = update.effective_user.id
    
    with get_db_session() as db:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if context.user_data.get('create_type') == 'employee':
            assignee_id = context.user_data.get('selected_employee_id')
        else:
            assignee_id = user_id

        assignee_user = db.query(User).filter(User.id == assignee_id).first()
        if not assignee_user:
             # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        new_project = Project(
            project_name=context.user_data['task_name'],
            leader_id=user_id,
            assignee_id=assignee_id,
            start_date=date.today(),
            status='active',
            daily_plan=context.user_data['daily_plan']
        )
        db.add(new_project)
        db.commit()

        message = f"‚úÖ –ó–∞–¥–∞—á–∞ \"{new_project.project_name}\" —Å–æ–∑–¥–∞–Ω–∞!\n"
        message += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{assignee_user.username}\n"
        message += f"üìÖ –î–Ω–µ–π: {len(new_project.daily_plan)}\n"
        
        await update.message.reply_text(message)
    
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞—è –∏—Ö –∏–∑ –ë–î."""
    user_id = update.effective_user.id
    with get_db_session() as db:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if is_admin(user_id):
            projects = db.query(Project).options(joinedload(Project.assignee)).filter(Project.leader_id == user_id).all()
            role_text = "–ø—Ä–æ–µ–∫—Ç—ã"
        else:
            projects = db.query(Project).filter(Project.assignee_id == user_id).all()
            role_text = "–∑–∞–¥–∞—á–∏"
        
        if not projects:
            await update.message.reply_text(f"–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç {role_text}.")
            return
        
        message = f"üìã –¢–≤–æ–∏ {role_text}:\n\n"
        for p in projects:
            # ... (–ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –Ω–æ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ SQLAlchemy)
            message += f"ID: {p.id} - {p.project_name} (–°—Ç–∞—Ç—É—Å: {p.status})\n"
        await update.message.reply_text(message)

async def team_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /team_status –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not is_admin(user_id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
        return
    
    projects_data, _ = load_data()
    user_projects = [p for p in projects_data['projects'] if p['leader_id'] == user_id]
    
    active_projects = [p for p in user_projects if p['status'] == 'active']
    completed_projects = [p for p in user_projects if p['status'] == 'completed']
    paused_projects = [p for p in user_projects if p['status'] == 'paused']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    employee_stats = {}
    for project in user_projects:
        assignee_id = project['assignee_id']
        if assignee_id not in employee_stats:
            employee_stats[assignee_id] = {'active': 0, 'completed': 0, 'paused': 0}
        employee_stats[assignee_id][project['status']] += 1
    
    message = "üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã:\n\n"
    message += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(active_projects)}\n"
    message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {len(completed_projects)}\n"
    message += f"‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {len(paused_projects)}\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(user_projects)}\n\n"
    
    if employee_stats:
        message += "üë• –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:\n"
        for assignee_id, stats in employee_stats.items():
            username = projects_data['users'].get(assignee_id, {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message += f"‚Ä¢ @{username}: {stats['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {stats['completed']} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö\n"
    
    if active_projects:
        message += "\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:\n"
        for project in active_projects[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            assignee = projects_data['users'].get(project['assignee_id'], {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            start_date = datetime.strptime(project['start_date'], '%Y-%m-%d').date()
            day_index = (date.today() - start_date).days
            total_days = len(project['daily_plan'])
            message += f"‚Ä¢ ID: {project['project_id']} - {project['project_name']} (@{assignee}, –¥–µ–Ω—å {day_index + 1}/{total_days})\n"
    
    await update.message.reply_text(message)

async def employee_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /employee_list –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not is_admin(user_id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
        return
    
    projects_data, _ = load_data()
    
    message = "üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
    
    for user_id, user_info in projects_data['users'].items():
        if not is_admin(user_id):
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            user_projects = [p for p in projects_data['projects'] if p['assignee_id'] == user_id]
            active_tasks = len([p for p in user_projects if p['status'] == 'active'])
            completed_tasks = len([p for p in user_projects if p['status'] == 'completed'])
            
            reminder_time = user_info.get('reminder_time', '09:00')
            reminder_enabled = user_info.get('reminder_enabled', True)
            
            status_emoji = "üü¢" if active_tasks > 0 else "‚ö™"
            reminder_emoji = "üîî" if reminder_enabled else "üîï"
            
            message += f"{status_emoji} @{user_info['username']}\n"
            message += f"   üìä –ó–∞–¥–∞—á: {active_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {completed_tasks} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö\n"
            message += f"   {reminder_emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {reminder_time}\n\n"
    
    message += "–ö–æ–º–∞–Ω–¥—ã:\n"
    message += "/create_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
    message += "/team_status - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã\n"
    
    await update.message.reply_text(message)

async def edit_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ edit_task)"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit_project –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –ø—Ä–æ–µ–∫—Ç–∞
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_project ID\n–ü—Ä–∏–º–µ—Ä: /edit_project 1")
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é edit_task
    await edit_task(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if is_admin(user_id):
        message = "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        message += "üë®‚Äçüíº –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
        message += "/my_tasks - –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã\n"
        message += "/team_status - —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã\n"
        message += "/employee_list - —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        message += "/edit_project ID - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n\n"
        message += "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n\n"
        message += "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n\n"
        message += "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
    else:
        message = "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        message += "üë§ –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        message += "/my_tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∑–∞–¥–∞—á—É\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n\n"
        message += "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n\n"
        message += "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n\n"
        message += "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        message += "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:\n"
        message += "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    
    message += "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin"
    
    await update.message.reply_text(message)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏
    # –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ –¥–∏–∞–ª–æ–≥–µ.
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: '{update.message.text}'")
    # await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def edit_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î."""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    
    try:
        task_id = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_task ID\n–ü—Ä–∏–º–µ—Ä: /edit_task 1")
        return

    with get_db_session() as db:
        # –ò—â–µ–º –∑–∞–¥–∞—á—É –∏ —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (leader, assignee)
        # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î.
        task = db.query(Project).options(
            joinedload(Project.leader),
            joinedload(Project.assignee)
        ).filter(Project.id == task_id).first()

        if not task:
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if user_id != task.leader_id and user_id != task.assignee_id:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.")
            return
            
        leader_username = task.leader.username if task.leader else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        assignee_username = task.assignee.username if task.assignee else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        day_index = (date.today() - task.start_date).days
        total_days = len(task.daily_plan)

        message = f"üìù –ó–∞–¥–∞—á–∞ ID: {task.id}\n\n"
        message += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {task.project_name}\n"
        message += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{assignee_username}\n"
        message += f"üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: @{leader_username}\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {task.status}\n"
        message += f"üìÖ –î–µ–Ω—å {day_index + 1} –∏–∑ {total_days}\n"

        # –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if task.status == 'active' and 0 <= day_index < total_days:
            today_plan = task.daily_plan[day_index]
            message += f"üü¢ –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–î–µ–Ω—å {day_index + 1}):\n{today_plan}\n\n"
        
        # –û–±—â–∏–π –ø–ª–∞–Ω
        message += "üìã –û–±—â–∏–π –ø–ª–∞–Ω:\n"
        for i, task_content in enumerate(task.daily_plan, 1):
            if i <= day_index and task.status == 'completed':
                status_icon = "‚úÖ"
            elif i <= day_index and task.status != 'completed':
                 status_icon = "‚úîÔ∏è" # –î–µ–Ω—å –ø—Ä–æ—à–µ–ª, –Ω–æ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            elif i == day_index + 1 and task.status == 'active':
                status_icon = "üü¢"
            else:
                status_icon = "‚è≥"
            message += f"{status_icon} –î–µ–Ω—å {i}: {task_content}\n"
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        message += "\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        if task.status == 'active':
            message += f"‚Ä¢ /pause_task {task.id} - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            message += f"‚Ä¢ /finish_task {task.id} - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        elif task.status == 'paused':
            message += f"‚Ä¢ /resume_task {task.id} - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        elif task.status == 'completed':
            message += f"‚Ä¢ /reopen_task {task.id} - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"

        await update.message.reply_text(message)

async def pause_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /pause_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pause_task ID\n–ü—Ä–∏–º–µ—Ä: /pause_task 1")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /pause_task 1")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    if task['status'] != 'active':
        await update.message.reply_text("–ú–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
        return
    
    # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
    task['status'] = 'paused'
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['project_name']}\" –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def resume_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /resume_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resume_task ID\n–ü—Ä–∏–º–µ—Ä: /resume_task 1")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /resume_task 1")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    if task['status'] != 'paused':
        await update.message.reply_text("–ú–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
        return
    
    # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    task['status'] = 'active'
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['project_name']}\" –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def finish_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /finish_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /finish_task ID\n–ü—Ä–∏–º–µ—Ä: /finish_task 1")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /finish_task 1")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    if task['status'] == 'completed':
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
    task['status'] = 'completed'
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['project_name']}\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def reopen_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∑–∞–Ω–æ–≤–æ"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reopen_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reopen_task ID\n–ü—Ä–∏–º–µ—Ä: /reopen_task 1")
        return

    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /reopen_task 1")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    if task['status'] != 'completed':
        await update.message.reply_text("–ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
        return
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ
    task['status'] = 'active'
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['project_name']}\" –æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–Ω–æ–≤–æ.")

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /clear_history –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    projects_data, tasks_data = load_data()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—á–∏—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed_tasks = [p for p in projects_data['projects'] if p['status'] == 'completed' and p['leader_id'] == user_id]
    else:
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—á–∏—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed_tasks = [p for p in projects_data['projects'] if p['status'] == 'completed' and p['assignee_id'] == user_id]
    
    if not completed_tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if is_admin(user_id):
        projects_data['projects'] = [p for p in projects_data['projects'] if not (p['status'] == 'completed' and p['leader_id'] == user_id)]
    else:
        projects_data['projects'] = [p for p in projects_data['projects'] if not (p['status'] == 'completed' and p['assignee_id'] == user_id)]
    
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {len(completed_tasks)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.")

async def edit_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit_task_name –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_task_name ID –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä: /edit_task_name 1 –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /edit_task_name 1 –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        return
    
    new_name = ' '.join(context.args[1:])
    if not new_name.strip():
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    old_name = task['project_name']
    task['project_name'] = new_name
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–æ:\n\"{old_name}\" ‚Üí \"{new_name}\"")

async def edit_task_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit_task_plan –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args or len(context.args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_task_plan ID –¥–µ–Ω—å –Ω–æ–≤—ã–π_–ø–ª–∞–Ω\n–ü—Ä–∏–º–µ—Ä: /edit_task_plan 1 2 –ù–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å 2")
        return
    
    try:
        task_id = int(context.args[0])
        day_number = int(context.args[1])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü—Ä–∏–º–µ—Ä: /edit_task_plan 1 2 –ù–æ–≤—ã–π –ø–ª–∞–Ω")
        return
    
    new_plan = ' '.join(context.args[2:])
    if not new_plan.strip():
        await update.message.reply_text("–ü–ª–∞–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
            break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
    if day_number < 1 or day_number > len(task['daily_plan']):
        await update.message.reply_text(f"–ù–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(task['daily_plan'])}.")
        return
    
    # –ò–∑–º–µ–Ω—è–µ–º –ø–ª–∞–Ω
    old_plan = task['daily_plan'][day_number - 1]
    task['daily_plan'][day_number - 1] = new_plan
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ü–ª–∞–Ω –¥–Ω—è {day_number} –∏–∑–º–µ–Ω–µ–Ω:\n\"{old_plan}\" ‚Üí \"{new_plan}\"")

async def set_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /set_reminder_time –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_reminder_time –≤—Ä–µ–º—è\n–ü—Ä–∏–º–µ—Ä: /set_reminder_time 09:00")
        return
    
    time_str = context.args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    try:
        from datetime import datetime
        datetime.strptime(time_str, '%H:%M')
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /set_reminder_time 09:00")
        return
    
    projects_data, tasks_data = load_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in projects_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    projects_data['users'][user_id]['reminder_time'] = time_str
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")

async def toggle_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /toggle_reminder –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    projects_data, tasks_data = load_data()
    
    if user_id not in projects_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    current_status = projects_data['users'][user_id].get('reminder_enabled', True)
    new_status = not current_status
    
    projects_data['users'][user_id]['reminder_enabled'] = new_status
    save_data(projects_data, tasks_data)
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    emoji = "üîî" if new_status else "üîï"
    
    await update.message.reply_text(f"{emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")

async def send_daily_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö"""
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    projects_data, tasks_data = load_data()
    current_time = datetime.now().strftime('%H:%M')
    today = date.today()
    
    for user_id, user_info in projects_data['users'].items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_info.get('reminder_enabled', True):
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        reminder_time = user_info.get('reminder_time', '09:00')
        if current_time != reminder_time:
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tasks = []
        for project in projects_data['projects']:
            if project['assignee_id'] == user_id and project['status'] == 'active':
                start_date = datetime.strptime(project['start_date'], '%Y-%m-%d').date()
                day_index = (today - start_date).days
                total_days = len(project['daily_plan'])
                
                if day_index >= 0 and day_index < total_days:
                    user_tasks.append({
                        'project': project,
                        'day_index': day_index,
                        'total_days': total_days,
                        'today_plan': project['daily_plan'][day_index]
                    })
        
        if not user_tasks:
            continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —É —Ç–µ–±—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        for task_info in user_tasks:
            project = task_info['project']
            day_index = task_info['day_index']
            total_days = task_info['total_days']
            today_plan = task_info['today_plan']
            
            message += f"üìã **{project['project_name']}** (–î–µ–Ω—å {day_index + 1} –∏–∑ {total_days})\n"
            message += f"üìù –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {today_plan}\n\n"
        
        message += "üí° –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–¥–∞—á–∞—Ö!"
        
        try:
            await context.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å.
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    create_db_and_tables()
    logger.info("–¢–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã.")

    token = os.getenv('TELEGRAM_TOKEN')
    if not token:
        logger.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN")
        return
    
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    job_queue = application.job_queue
    job_queue.run_repeating(send_daily_reminders, interval=60, first=10)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("my_tasks", my_tasks))
    application.add_handler(CommandHandler("team_status", team_status))
    application.add_handler(CommandHandler("employee_list", employee_list))
    application.add_handler(CommandHandler("edit_project", edit_project))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    application.add_handler(CommandHandler("edit_task", edit_task))
    application.add_handler(CommandHandler("pause_task", pause_task))
    application.add_handler(CommandHandler("resume_task", resume_task))
    application.add_handler(CommandHandler("finish_task", finish_task))
    application.add_handler(CommandHandler("reopen_task", reopen_task))
    application.add_handler(CommandHandler("clear_history", clear_history))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–¥–∞—á
    application.add_handler(CommandHandler("edit_task_name", edit_task_name))
    application.add_handler(CommandHandler("edit_task_plan", edit_task_plan))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    application.add_handler(CommandHandler("set_reminder_time", set_reminder_time))
    application.add_handler(CommandHandler("toggle_reminder", toggle_reminder))
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    logger.info("–°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è create_task")
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('create_task', create_task)],
        states={
            CHOOSING_TYPE: [CallbackQueryHandler(button_handler, pattern='^create_for_employee$|^create_for_self$')],
            CHOOSING_EMPLOYEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_employee_choice)],
            TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_name)],
            TASK_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_days)],
            TASK_DAY_CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_day_content)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        name="create_task_conversation",
        persistent=False,
        allow_reentry=True
    )
    application.add_handler(conv_handler)
    logger.info("ConversationHandler –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ ConversationHandler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
