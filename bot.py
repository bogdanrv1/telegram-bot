import json
import logging
from datetime import datetime, date, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv('.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_TYPE, CHOOSING_EMPLOYEE, TASK_NAME, TASK_DAYS, TASK_DAY_CONTENT, REMINDER_TIME = range(6)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PROJECTS_FILE = 'projects.json'
TASKS_FILE = 'tasks.json'

# –ê–¥–º–∏–Ω—ã (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏) - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID
ADMINS = ['499188225']  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    try:
        with open(PROJECTS_FILE, 'r', encoding='utf-8') as f:
            projects_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        projects_data = {"projects": [], "users": {}, "next_project_id": 1}
    
    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as f:
            tasks_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        tasks_data = {}
    
    return projects_data, tasks_data

def save_data(projects_data, tasks_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã"""
    with open(PROJECTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(projects_data, f, ensure_ascii=False, indent=2)
    
    with open(TASKS_FILE, 'w', encoding='utf-8') as f:
        json.dump(tasks_data, f, ensure_ascii=False, indent=2)

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(user_id) in ADMINS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    username = update.effective_user.username
    
    projects_data, tasks_data = load_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in projects_data['users']:
        projects_data['users'][user_id] = {
            'username': username,
            'reminder_time': '09:00',
            'reminder_enabled': True
        }
        save_data(projects_data, tasks_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_projects = [p for p in projects_data['projects'] if p['assignee_id'] == user_id]
    active_projects = [p for p in user_projects if p['status'] == 'active']
    completed_projects = [p for p in user_projects if p['status'] == 'completed']
    
    if is_admin(user_id):
        # –ú–µ–Ω—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        all_projects = [p for p in projects_data['projects'] if p['leader_id'] == user_id]
        all_active = [p for p in all_projects if p['status'] == 'active']
        all_completed = [p for p in all_projects if p['status'] == 'completed']
        
        message = f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã.\n\n"
        message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_active)}\n"
        message += f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(projects_data['users'])}\n"
        message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(all_completed)}\n\n"
        
        if all_active:
            message += "üìã –¢–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n"
            for project in all_active[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                status_emoji = "üü¢" if project['status'] == 'active' else "üü°"
                assignee = projects_data['users'].get(project['assignee_id'], {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message += f"{status_emoji} ID: {project['project_id']} - {project['project_name']} (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{assignee})\n"
        
        message += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        message += "/my_tasks - –≤—Å–µ –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã\n"
        message += "/team_status - —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã\n"
        message += "/employee_list - —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        message += "/edit_project ID - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        
    else:
        # –ú–µ–Ω—é –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        user_info = projects_data['users'][user_id]
        reminder_time = user_info.get('reminder_time', '09:00')
        
        message = f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.\n\n"
        message += f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(active_projects)}\n"
        message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {len(completed_projects)}\n"
        message += f"‚Ä¢ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {reminder_time}\n\n"
        
        if active_projects:
            message += "üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
            for project in active_projects[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                start_date = datetime.strptime(project['start_date'], '%Y-%m-%d').date()
                day_index = (date.today() - start_date).days
                total_days = len(project['daily_plan'])
                status_emoji = "üü¢" if day_index < total_days else "üü°"
                message += f"{status_emoji} ID: {project['project_id']} - {project['project_name']} (–î–µ–Ω—å {day_index + 1} –∏–∑ {total_days})\n"
        
        message += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += "/my_tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∑–∞–¥–∞—á—É\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        message += "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
    
    await update.message.reply_text(message)

async def create_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /create_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if is_admin(user_id):
        # –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("1Ô∏è‚É£ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data="create_for_employee")],
            [InlineKeyboardButton("2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –¥–ª—è —Å–µ–±—è", callback_data="create_for_self")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n–ö—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å?\n1Ô∏è‚É£ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É\n2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –¥–ª—è —Å–µ–±—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
        await update.message.reply_text(message, reply_markup=reply_markup)
        return CHOOSING_TYPE
    else:
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –¥–ª—è —Å–µ–±—è
        context.user_data['create_type'] = 'self'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n–ü—Ä–∏–º–µ—Ä: –î–∏–∑–∞–π–Ω –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞")
        return TASK_NAME

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query: {query.data}")
    
    if query.data == "create_for_employee":
        context.user_data['create_type'] = 'employee'
        context.user_data['conversation_state'] = CHOOSING_EMPLOYEE
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø —Å–æ–∑–¥–∞–Ω–∏—è: employee –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
        projects_data, _ = load_data()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = []
        for user_id, user_info in projects_data['users'].items():
            if not is_admin(user_id) and user_info.get('username'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ None
                active_tasks = len([p for p in projects_data['projects'] if p['assignee_id'] == user_id and p['status'] == 'active'])
                employees.append(f"üë§ @{user_info['username']} (ID: {user_id}) - {active_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        if not employees:
            await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–µ–±—è.")
            context.user_data['create_type'] = 'self'
            context.user_data['conversation_state'] = TASK_NAME
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n–ü—Ä–∏–º–µ—Ä: –î–∏–∑–∞–π–Ω –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞")
            return TASK_NAME
        
        message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n" + "\n".join(employees) + "\n\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6166088736):"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees}")
        await query.edit_message_text(message)
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING_EMPLOYEE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
        return CHOOSING_EMPLOYEE
        
    elif query.data == "create_for_self":
        context.user_data['create_type'] = 'self'
        context.user_data['conversation_state'] = TASK_NAME
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n–ü—Ä–∏–º–µ—Ä: –î–∏–∑–∞–π–Ω –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞")
        return TASK_NAME

async def handle_employee_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    logger.info(f"handle_employee_choice –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{update.message.text}'")
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data.get('conversation_state', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
    
    employee_input = update.message.text.strip()
    projects_data, _ = load_data()
    
    # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏–ª–∏ username
    selected_employee_id = None
    selected_employee_name = None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
    if employee_input in projects_data['users']:
        user_info = projects_data['users'][employee_input]
        if not is_admin(employee_input) and user_info.get('username'):
            selected_employee_id = employee_input
            selected_employee_name = user_info['username']
            logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –ø–æ ID: {selected_employee_id} (@{selected_employee_name})")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–æ username
    if not selected_employee_id:
        for user_id, user_info in projects_data['users'].items():
            if not is_admin(user_id) and user_info.get('username') == employee_input:
                selected_employee_id = user_id
                selected_employee_name = user_info['username']
                logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –ø–æ username: {selected_employee_id} (@{selected_employee_name})")
                break
            
    if selected_employee_id:
        context.user_data['selected_employee_id'] = selected_employee_id
        context.user_data['conversation_state'] = TASK_NAME
        logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω: {selected_employee_id} (@{selected_employee_name})")
        await update.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: @{selected_employee_name} (ID: {selected_employee_id})\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n–ü—Ä–∏–º–µ—Ä: –î–∏–∑–∞–π–Ω –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞")
        return TASK_NAME
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        available_employees = []
        for user_id, user_info in projects_data['users'].items():
            if not is_admin(user_id) and user_info.get('username'):
                available_employees.append(f"üë§ @{user_info['username']} (ID: {user_id})")
        
        error_message = "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
        error_message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n" + "\n".join(available_employees) + "\n\n"
        error_message += "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6166088736) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_employees}")
        await update.message.reply_text(error_message)
        return CHOOSING_EMPLOYEE

async def handle_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_task_name –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{update.message.text}'")
    task_name = update.message.text.strip()
    context.user_data['task_name'] = task_name
    context.user_data['conversation_state'] = TASK_DAYS
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_name}")
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)")
    return ConversationHandler.END

async def handle_task_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_task_days –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{update.message.text}'")
    try:
        days = int(update.message.text.strip())
        if days <= 0 or days > 30:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return ConversationHandler.END
        context.user_data['task_days'] = days
        context.user_data['daily_plan'] = []
        context.user_data['current_day'] = 1
        context.user_data['conversation_state'] = TASK_DAY_CONTENT
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {days}")
        await update.message.reply_text("–î–µ–Ω—å 1: –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è 1-–≥–æ –¥–Ω—è:\n\n–ü—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞–ø–æ–≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)")
        return ConversationHandler.END

async def handle_day_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    day_content = update.message.text.strip()
    context.user_data['daily_plan'].append(day_content)
    current_day = context.user_data['current_day']
    total_days = context.user_data['task_days']
    if current_day < total_days:
        context.user_data['current_day'] = current_day + 1
        context.user_data['conversation_state'] = TASK_DAY_CONTENT
        await update.message.reply_text(f"–î–µ–Ω—å {current_day + 1}: –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è {current_day + 1}-–≥–æ –¥–Ω—è:\n\n–ü—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞–ø–æ–≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return ConversationHandler.END
    else:
        context.user_data['conversation_state'] = REMINDER_TIME
        await update.message.reply_text("–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n–ü—Ä–∏–º–µ—Ä: 09:00")
        return ConversationHandler.END

async def handle_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text.strip()
    try:
        datetime.strptime(time_str, '%H:%M')
        context.user_data['reminder_time'] = time_str
        context.user_data['conversation_state'] = None
        projects_data, tasks_data = load_data()
        user_id = str(update.effective_user.id)
        new_project = {
            'project_id': projects_data['next_project_id'],
            'project_name': context.user_data['task_name'],
            'leader_id': user_id,
            'assignee_id': context.user_data.get('selected_employee_id', user_id),
            'assignee_username': projects_data['users'].get(context.user_data.get('selected_employee_id', user_id), {}).get('username', ''),
            'start_date': date.today().isoformat(),
            'status': 'active',
            'daily_plan': context.user_data['daily_plan'],
            'time_per_task': 3,
            'active_tasks': {}
        }
        projects_data['projects'].append(new_project)
        projects_data['next_project_id'] += 1
        assignee_id = context.user_data.get('selected_employee_id', user_id)
        if assignee_id in projects_data['users']:
            projects_data['users'][assignee_id]['reminder_time'] = time_str
        save_data(projects_data, tasks_data)
        assignee_name = projects_data['users'].get(assignee_id, {}).get('username', '–í—ã')
        message = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        message += f"üìã \"{context.user_data['task_name']}\"\n"
        message += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{assignee_name}\n"
        message += f"üìÖ –î–Ω–µ–π: {context.user_data['task_days']}\n"
        message += f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {time_str}\n\n"
        message += "üìã –ü–ª–∞–Ω:\n"
        for i, task in enumerate(context.user_data['daily_plan'], 1):
            message += f"–î–µ–Ω—å {i}: {task}\n"
        message += f"\n–ö–æ–º–∞–Ω–¥—ã:\n"
        message += f"/my_tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
        context.user_data.clear()
        await update.message.reply_text(message)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    context.user_data.clear()
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏/–ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /my_tasks –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    projects_data, _ = load_data()
    
    if is_admin(user_id):
        # –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ –æ–Ω–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏
        user_projects = [p for p in projects_data['projects'] if p['leader_id'] == user_id]
        role_text = "–ø—Ä–æ–µ–∫—Ç—ã"
    else:
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏, –≥–¥–µ –æ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        user_projects = [p for p in projects_data['projects'] if p['assignee_id'] == user_id]
        role_text = "–∑–∞–¥–∞—á–∏"
    
    if not user_projects:
        await update.message.reply_text(f"–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç {role_text}.")
        return

    message = f"üìã –¢–≤–æ–∏ {role_text}:\n\n"
    
    for project in user_projects:
        start_date = datetime.strptime(project['start_date'], '%Y-%m-%d').date()
        day_index = (date.today() - start_date).days
        total_days = len(project['daily_plan'])
        if day_index < total_days:
            current_task = project['daily_plan'][day_index]
        else:
            current_task = "–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if project['status'] == 'completed':
            status_emoji = "‚úÖ"
            status_text = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        elif project['status'] == 'paused':
            status_emoji = "‚è∏Ô∏è"
            status_text = "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        else:
            status_emoji = "üü¢"
            status_text = "–í —Ä–∞–±–æ—Ç–µ" if day_index < total_days else "–ù–µ –Ω–∞—á–∞—Ç–æ"
        message += f"{status_emoji} ID: {project['project_id']} - \"{project['project_name']}\"\n"
        if is_admin(user_id):
            assignee = projects_data['users'].get(project['assignee_id'], {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{assignee}\n"
        else:
            message += f"üìù –ó–∞–¥–∞—á–∞: {current_task}\n"
            message += f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {projects_data['users'][user_id].get('reminder_time', '09:00')}\n"
        message += f"üìÖ –î–µ–Ω—å {day_index + 1} –∏–∑ {total_days}\n"
        if project['status'] == 'active' and day_index >= 0:
            if day_index < total_days:
                progress_percent = int((day_index + 1) / total_days * 100)
                message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}% ({day_index + 1}/{total_days})\n"
            else:
                message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 100% (—Å—Ä–æ–∫ –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ {day_index - total_days + 1} –¥–Ω–µ–π)\n"
        elif project['status'] == 'completed':
            message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 100% (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)\n"
        elif project['status'] == 'paused':
            if day_index >= 0 and day_index < total_days:
                progress_percent = int((day_index + 1) / total_days * 100)
                message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}% (–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)\n"
            else:
                message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 100% (–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if is_admin(user_id):
        message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        message += "/team_status - —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã\n"
        message += "/employee_list - —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
    else:
        message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += "/my_tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∑–∞–¥–∞—á—É\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        message += "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
    
    await update.message.reply_text(message)

async def team_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /team_status –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not is_admin(user_id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
        return
    
    projects_data, _ = load_data()
    user_projects = [p for p in projects_data['projects'] if p['leader_id'] == user_id]
    
    active_projects = [p for p in user_projects if p['status'] == 'active']
    completed_projects = [p for p in user_projects if p['status'] == 'completed']
    paused_projects = [p for p in user_projects if p['status'] == 'paused']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    employee_stats = {}
    for project in user_projects:
        assignee_id = project['assignee_id']
        if assignee_id not in employee_stats:
            employee_stats[assignee_id] = {'active': 0, 'completed': 0, 'paused': 0}
        employee_stats[assignee_id][project['status']] += 1
    
    message = "üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã:\n\n"
    message += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(active_projects)}\n"
    message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {len(completed_projects)}\n"
    message += f"‚Ä¢ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {len(paused_projects)}\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(user_projects)}\n\n"
    
    if employee_stats:
        message += "üë• –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:\n"
        for assignee_id, stats in employee_stats.items():
            username = projects_data['users'].get(assignee_id, {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message += f"‚Ä¢ @{username}: {stats['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {stats['completed']} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö\n"
    
    if active_projects:
        message += "\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:\n"
        for project in active_projects[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            assignee = projects_data['users'].get(project['assignee_id'], {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            start_date = datetime.strptime(project['start_date'], '%Y-%m-%d').date()
            day_index = (date.today() - start_date).days
            total_days = len(project['daily_plan'])
            message += f"‚Ä¢ ID: {project['project_id']} - {project['project_name']} (@{assignee}, –¥–µ–Ω—å {day_index + 1}/{total_days})\n"
    
    await update.message.reply_text(message)

async def employee_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /employee_list –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not is_admin(user_id):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")
        return
    
    projects_data, _ = load_data()
    
    message = "üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
    
    for user_id, user_info in projects_data['users'].items():
        if not is_admin(user_id):
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            user_projects = [p for p in projects_data['projects'] if p['assignee_id'] == user_id]
            active_tasks = len([p for p in user_projects if p['status'] == 'active'])
            completed_tasks = len([p for p in user_projects if p['status'] == 'completed'])
            
            reminder_time = user_info.get('reminder_time', '09:00')
            reminder_enabled = user_info.get('reminder_enabled', True)
            
            status_emoji = "üü¢" if active_tasks > 0 else "‚ö™"
            reminder_emoji = "üîî" if reminder_enabled else "üîï"
            
            message += f"{status_emoji} @{user_info['username']}\n"
            message += f"   üìä –ó–∞–¥–∞—á: {active_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {completed_tasks} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö\n"
            message += f"   {reminder_emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {reminder_time}\n\n"
    
    message += "–ö–æ–º–∞–Ω–¥—ã:\n"
    message += "/create_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
    message += "/team_status - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã\n"
    
    await update.message.reply_text(message)

async def edit_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ edit_task)"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit_project –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –ø—Ä–æ–µ–∫—Ç–∞
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_project ID\n–ü—Ä–∏–º–µ—Ä: /edit_project 1")
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é edit_task
    await edit_task(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if is_admin(user_id):
        message = "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        message += "üë®‚Äçüíº –î–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
        message += "/my_tasks - –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã\n"
        message += "/team_status - —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã\n"
        message += "/employee_list - —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        message += "/edit_project ID - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n\n"
        message += "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n\n"
        message += "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n\n"
        message += "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
    else:
        message = "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        message += "üë§ –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        message += "/my_tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
        message += "/create_task - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∑–∞–¥–∞—á—É\n"
        message += "/edit_task ID - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏\n\n"
        message += "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:\n"
        message += "/pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        message += "/resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
        message += "/finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        message += "/reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        message += "/clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n\n"
        message += "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        message += "/edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        message += "/edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω\n\n"
        message += "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        message += "/set_reminder_time –≤—Ä–µ–º—è - –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "/toggle_reminder - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        message += "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:\n"
        message += "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    
    message += "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin"
    
    await update.message.reply_text(message)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    conversation_state = context.user_data.get('conversation_state')
    
    logger.info(f"handle_text_message –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ—Å–µ–¥—ã: {conversation_state}")
    logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{update.message.text}'")
    
    if conversation_state == CHOOSING_EMPLOYEE:
        return await handle_employee_choice(update, context)
    elif conversation_state == TASK_NAME:
        return await handle_task_name(update, context)
    elif conversation_state == TASK_DAYS:
        return await handle_task_days(update, context)
    elif conversation_state == TASK_DAY_CONTENT:
        return await handle_day_content(update, context)
    elif conversation_state == REMINDER_TIME:
        return await handle_reminder_time(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return ConversationHandler.END

async def edit_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –∑–∞–¥–∞—á–∏
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_task ID\n–ü—Ä–∏–º–µ—Ä: /edit_task 1")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /edit_task 1")
        return
    
    projects_data, _ = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –≥–¥–µ –æ–Ω–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –≥–¥–µ –æ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        if is_admin(user_id):
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        else:
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    assignee = projects_data['users'].get(task['assignee_id'], {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    leader = projects_data['users'].get(task['leader_id'], {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    start_date = datetime.strptime(task['start_date'], '%Y-%m-%d').date()
    day_index = (date.today() - start_date).days
    total_days = len(task['daily_plan'])
    
    message = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ID: {task_id}\n\n"
    message += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {task['project_name']}\n"
    message += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{assignee}\n"
    message += f"üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: @{leader}\n"
    message += f"üìä –°—Ç–∞—Ç—É—Å: {task['status']}\n"
    message += f"üìÖ –î–µ–Ω—å {day_index + 1} –∏–∑ {total_days}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    if task['status'] == 'active' and day_index >= 0:
        if day_index < total_days:
            progress_percent = int((day_index + 1) / total_days * 100)
            message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}% ({day_index + 1}/{total_days})\n"
        else:
            message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 100% (—Å—Ä–æ–∫ –ø—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ {day_index - total_days + 1} –¥–Ω–µ–π)\n"
    elif task['status'] == 'completed':
        message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 100% (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)\n"
    elif task['status'] == 'paused':
        if day_index >= 0 and day_index < total_days:
            progress_percent = int((day_index + 1) / total_days * 100)
            message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}% (–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)\n"
        else:
            message += f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 100% (–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω —Å—Ä–æ–∫
    if task['status'] == 'active' and day_index >= 0 and day_index < total_days:
        today_plan = task['daily_plan'][day_index]
        message += f"üü¢ –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–î–µ–Ω—å {day_index + 1}):\n{today_plan}\n\n"
    elif task['status'] == 'active' and day_index >= total_days:
        message += f"üü° –ó–∞–¥–∞—á–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Å—Ä–æ–∫ –Ω–∞ {day_index - total_days + 1} –¥–Ω–µ–π\n\n"
    elif task['status'] == 'paused':
        message += f"‚è∏Ô∏è –ó–∞–¥–∞—á–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
    elif task['status'] == 'completed':
        message += f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
    
    message += "üìã –û–±—â–∏–π –ø–ª–∞–Ω:\n"
    for i, task_content in enumerate(task['daily_plan'], 1):
        if i <= day_index:
            status_icon = "‚úÖ"
        elif i == day_index + 1 and task['status'] == 'active':
            status_icon = "üü¢"
        else:
            status_icon = "‚è≥"
        message += f"{status_icon} –î–µ–Ω—å {i}: {task_content}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    message += "\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
    if task['status'] == 'active':
        message += "‚Ä¢ /pause_task ID - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        message += "‚Ä¢ /finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
    elif task['status'] == 'paused':
        message += "‚Ä¢ /resume_task ID - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        message += "‚Ä¢ /finish_task ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
    elif task['status'] == 'completed':
        message += "‚Ä¢ /reopen_task ID - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ\n"
    
    message += "‚Ä¢ /edit_task_name ID –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
    message += "‚Ä¢ /edit_task_plan ID –¥–µ–Ω—å –ø–ª–∞–Ω - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –¥–Ω—è\n"
    
    await update.message.reply_text(message)

async def pause_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /pause_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pause_task ID\n–ü—Ä–∏–º–µ—Ä: /pause_task 1")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /pause_task 1")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    if task['status'] != 'active':
        await update.message.reply_text("–ú–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
        return
    
    # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
    task['status'] = 'paused'
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['project_name']}\" –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def resume_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /resume_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resume_task ID\n–ü—Ä–∏–º–µ—Ä: /resume_task 1")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /resume_task 1")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    if task['status'] != 'paused':
        await update.message.reply_text("–ú–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
        return
    
    # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    task['status'] = 'active'
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['project_name']}\" –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def finish_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /finish_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /finish_task ID\n–ü—Ä–∏–º–µ—Ä: /finish_task 1")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /finish_task 1")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    if task['status'] == 'completed':
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
    task['status'] = 'completed'
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['project_name']}\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def reopen_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∑–∞–Ω–æ–≤–æ"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /reopen_task –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reopen_task ID\n–ü—Ä–∏–º–µ—Ä: /reopen_task 1")
        return

    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /reopen_task 1")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    if task['status'] != 'completed':
        await update.message.reply_text("–ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
        return
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ
    task['status'] = 'active'
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['project_name']}\" –æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–Ω–æ–≤–æ.")

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /clear_history –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    projects_data, tasks_data = load_data()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if is_admin(user_id):
        # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—á–∏—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed_tasks = [p for p in projects_data['projects'] if p['status'] == 'completed' and p['leader_id'] == user_id]
    else:
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—á–∏—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed_tasks = [p for p in projects_data['projects'] if p['status'] == 'completed' and p['assignee_id'] == user_id]
    
    if not completed_tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if is_admin(user_id):
        projects_data['projects'] = [p for p in projects_data['projects'] if not (p['status'] == 'completed' and p['leader_id'] == user_id)]
    else:
        projects_data['projects'] = [p for p in projects_data['projects'] if not (p['status'] == 'completed' and p['assignee_id'] == user_id)]
    
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {len(completed_tasks)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.")

async def edit_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit_task_name –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_task_name ID –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä: /edit_task_name 1 –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /edit_task_name 1 –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        return
    
    new_name = ' '.join(context.args[1:])
    if not new_name.strip():
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
                break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    old_name = task['project_name']
    task['project_name'] = new_name
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–æ:\n\"{old_name}\" ‚Üí \"{new_name}\"")

async def edit_task_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /edit_task_plan –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args or len(context.args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_task_plan ID –¥–µ–Ω—å –Ω–æ–≤—ã–π_–ø–ª–∞–Ω\n–ü—Ä–∏–º–µ—Ä: /edit_task_plan 1 2 –ù–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å 2")
        return
    
    try:
        task_id = int(context.args[0])
        day_number = int(context.args[1])
    except ValueError:
        await update.message.reply_text("ID –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü—Ä–∏–º–µ—Ä: /edit_task_plan 1 2 –ù–æ–≤—ã–π –ø–ª–∞–Ω")
        return
    
    new_plan = ' '.join(context.args[2:])
    if not new_plan.strip():
        await update.message.reply_text("–ü–ª–∞–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    projects_data, tasks_data = load_data()
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É
    task = None
    if is_admin(user_id):
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['leader_id'] == user_id:
                task = p
                break
    else:
        for p in projects_data['projects']:
            if p['project_id'] == task_id and p['assignee_id'] == user_id:
                task = p
            break
    
    if not task:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
    if day_number < 1 or day_number > len(task['daily_plan']):
        await update.message.reply_text(f"–ù–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(task['daily_plan'])}.")
        return
    
    # –ò–∑–º–µ–Ω—è–µ–º –ø–ª–∞–Ω
    old_plan = task['daily_plan'][day_number - 1]
    task['daily_plan'][day_number - 1] = new_plan
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –ü–ª–∞–Ω –¥–Ω—è {day_number} –∏–∑–º–µ–Ω–µ–Ω:\n\"{old_plan}\" ‚Üí \"{new_plan}\"")

async def set_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /set_reminder_time –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_reminder_time –≤—Ä–µ–º—è\n–ü—Ä–∏–º–µ—Ä: /set_reminder_time 09:00")
        return
    
    time_str = context.args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    try:
        from datetime import datetime
        datetime.strptime(time_str, '%H:%M')
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /set_reminder_time 09:00")
        return
    
    projects_data, tasks_data = load_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in projects_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    projects_data['users'][user_id]['reminder_time'] = time_str
    save_data(projects_data, tasks_data)
    
    await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")

async def toggle_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /toggle_reminder –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    
    projects_data, tasks_data = load_data()
    
    if user_id not in projects_data['users']:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    current_status = projects_data['users'][user_id].get('reminder_enabled', True)
    new_status = not current_status
    
    projects_data['users'][user_id]['reminder_enabled'] = new_status
    save_data(projects_data, tasks_data)
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    emoji = "üîî" if new_status else "üîï"
    
    await update.message.reply_text(f"{emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")

async def send_daily_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö"""
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    projects_data, tasks_data = load_data()
    current_time = datetime.now().strftime('%H:%M')
    today = date.today()
    
    for user_id, user_info in projects_data['users'].items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_info.get('reminder_enabled', True):
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        reminder_time = user_info.get('reminder_time', '09:00')
        if current_time != reminder_time:
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tasks = []
        for project in projects_data['projects']:
            if project['assignee_id'] == user_id and project['status'] == 'active':
                start_date = datetime.strptime(project['start_date'], '%Y-%m-%d').date()
                day_index = (today - start_date).days
                total_days = len(project['daily_plan'])
                
                if day_index >= 0 and day_index < total_days:
                    user_tasks.append({
                        'project': project,
                        'day_index': day_index,
                        'total_days': total_days,
                        'today_plan': project['daily_plan'][day_index]
                    })
        
        if not user_tasks:
            continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —É —Ç–µ–±—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        for task_info in user_tasks:
            project = task_info['project']
            day_index = task_info['day_index']
            total_days = task_info['total_days']
            today_plan = task_info['today_plan']
            
            message += f"üìã **{project['project_name']}** (–î–µ–Ω—å {day_index + 1} –∏–∑ {total_days})\n"
            message += f"üìù –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {today_plan}\n\n"
        
        message += "üí° –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–¥–∞—á–∞—Ö!"
        
        try:
            await context.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_TOKEN')
    logger.info(f"–¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {token[:10]}..." if token else "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not token:
        logger.error("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É: TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    job_queue = application.job_queue
    job_queue.run_repeating(send_daily_reminders, interval=60, first=10)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("my_tasks", my_tasks))
    application.add_handler(CommandHandler("team_status", team_status))
    application.add_handler(CommandHandler("employee_list", employee_list))
    application.add_handler(CommandHandler("edit_project", edit_project))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    application.add_handler(CommandHandler("edit_task", edit_task))
    application.add_handler(CommandHandler("pause_task", pause_task))
    application.add_handler(CommandHandler("resume_task", resume_task))
    application.add_handler(CommandHandler("finish_task", finish_task))
    application.add_handler(CommandHandler("reopen_task", reopen_task))
    application.add_handler(CommandHandler("clear_history", clear_history))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–¥–∞—á
    application.add_handler(CommandHandler("edit_task_name", edit_task_name))
    application.add_handler(CommandHandler("edit_task_plan", edit_task_plan))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    application.add_handler(CommandHandler("set_reminder_time", set_reminder_time))
    application.add_handler(CommandHandler("toggle_reminder", toggle_reminder))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º ConversationHandler (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    logger.info("–°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è create_task")
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('create_task', create_task)],
        states={
            CHOOSING_TYPE: [CallbackQueryHandler(button_handler)],
            CHOOSING_EMPLOYEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message)],
            TASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message)],
            TASK_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message)],
            TASK_DAY_CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message)],
            REMINDER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        name="create_task_conversation",
        persistent=False,
        allow_reentry=True
    )
    application.add_handler(conv_handler)
    logger.info("ConversationHandler –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()